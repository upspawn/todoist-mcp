name: Code Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run npm audit fix (dry run)
        run: npm audit fix --dry-run

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate coverage report
        run: npm test -- --coverage --coverageReporters json-summary --coverageReporters text

      - name: Create beautiful coverage report
        if: github.event_name == 'pull_request'
        run: |
          # Parse coverage JSON and create markdown
          cat > coverage-report.md << 'EOF'
          ## 📊 Test Coverage Report
          
          EOF
          
          # Extract coverage data
          COVERAGE_FILE="coverage/coverage-summary.json"
          
          if [ -f "$COVERAGE_FILE" ]; then
            # Parse JSON using node
            node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('$COVERAGE_FILE', 'utf8'));
              const total = coverage.total;
              
              // Function to get emoji and color based on percentage
              function getCoverageInfo(pct) {
                if (pct >= 90) return { emoji: '🟢', status: 'Excellent' };
                if (pct >= 80) return { emoji: '🟡', status: 'Good' };
                if (pct >= 70) return { emoji: '🟠', status: 'Fair' };
                return { emoji: '🔴', status: 'Needs Improvement' };
              }
              
              // Generate summary table
              console.log('| Metric | Coverage | Status |');
              console.log('|--------|----------|---------|');
              
              const metrics = [
                { name: 'Lines', key: 'lines' },
                { name: 'Functions', key: 'functions' },
                { name: 'Branches', key: 'branches' },
                { name: 'Statements', key: 'statements' }
              ];
              
              metrics.forEach(metric => {
                const pct = total[metric.key].pct;
                const info = getCoverageInfo(pct);
                console.log(\`| \${metric.name} | \${pct}% | \${info.emoji} \${info.status} |\`);
              });
              
              console.log('');
              console.log('### 📈 Detailed Breakdown');
              console.log('');
              console.log('| Type | Covered | Total | Percentage |');
              console.log('|------|---------|-------|------------|');
              
              metrics.forEach(metric => {
                const data = total[metric.key];
                console.log(\`| \${metric.name} | \${data.covered} | \${data.total} | \${data.pct}% |\`);
              });
              
              // Overall assessment
              const avgCoverage = (total.lines.pct + total.functions.pct + total.branches.pct + total.statements.pct) / 4;
              const overallInfo = getCoverageInfo(avgCoverage);
              
              console.log('');
              console.log(\`### 🎯 Overall Assessment: \${overallInfo.emoji} \${overallInfo.status}\`);
              console.log(\`**Average Coverage: \${avgCoverage.toFixed(1)}%**\`);
              
              if (avgCoverage >= 80) {
                console.log('');
                console.log('✅ **Great job!** Your code coverage meets the project standards.');
              } else {
                console.log('');
                console.log('⚠️ **Coverage below target.** Consider adding more tests to reach 80%+ coverage.');
              }
            " >> coverage-report.md
          else
            echo "❌ Coverage report not found. Tests may have failed." >> coverage-report.md
          fi
          
          echo "" >> coverage-report.md
          echo "---" >> coverage-report.md
          echo "*Generated by CI on $(date)*" >> coverage-report.md

      - name: Add Beautiful Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: coverage-report.md

  bundle-size:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "## 📦 Bundle Size Analysis" > bundle-analysis.md
          echo "" >> bundle-analysis.md
          
          # Get total size first
          TOTAL_SIZE=$(du -sh dist | cut -f1)
          echo "### 📊 Summary" >> bundle-analysis.md
          echo "**Total Package Size: \`$TOTAL_SIZE\`**" >> bundle-analysis.md
          echo "" >> bundle-analysis.md
          
          # File breakdown
          echo "### 📋 File Breakdown" >> bundle-analysis.md
          echo "" >> bundle-analysis.md
          echo "| File | Size | Type |" >> bundle-analysis.md
          echo "|------|------|------|" >> bundle-analysis.md
          
          find dist -type f \( -name "*.js" -o -name "*.d.ts" -o -name "*.map" \) | while read file; do
            size=$(du -h "$file" | cut -f1)
            if [[ "$file" == *.js ]]; then
              filetype="🟨 JavaScript"
            elif [[ "$file" == *.d.ts ]]; then
              filetype="🟦 TypeScript Definitions"  
            elif [[ "$file" == *.map ]]; then
              filetype="🗺️ Source Map"
            else
              filetype="📄 Other"
            fi
            echo "| \`$(basename "$file")\` | \`$size\` | $filetype |" >> bundle-analysis.md
          done
          
          echo "" >> bundle-analysis.md
          
          # Size recommendations
          echo "### 💡 Size Assessment" >> bundle-analysis.md
          echo "" >> bundle-analysis.md
          
          # Convert size to bytes for comparison (rough estimation)
          if [[ "$TOTAL_SIZE" == *"K"* ]]; then
            echo "✅ **Excellent!** Package size is very reasonable for an MCP server." >> bundle-analysis.md
          elif [[ "$TOTAL_SIZE" == *"M"* ]]; then
            echo "⚠️ **Consider optimization** - Package size is getting large for an MCP server." >> bundle-analysis.md
          else
            echo "✅ **Great!** Very compact package size." >> bundle-analysis.md
          fi
          
          echo "" >> bundle-analysis.md
          echo "---" >> bundle-analysis.md
          echo "*Generated by CI on $(date)*" >> bundle-analysis.md
          
          # Also output to console for logs
          cat bundle-analysis.md

      - name: Comment bundle size on PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: bundle-analysis.md